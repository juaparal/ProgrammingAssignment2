plot(x, z, main="Coseno", lty=3, col="blue", type="l",xlim=c(0, 2), ylab="cos(x)")
plot(x, z, main="Coseno", lty=3, col="blue", type="l", xlim=c(0, 2), ylab="cos(x)")
plot(x, y, main="Funciones seno y coseno", type="l")
lines(x, z, col="blue", lty=2)
text(x=c(0.5, 0.5), y=c(0, 1), labels=c("sin(x)", "cos(x)"), col=c("black", "blue"))
plot(x, y, main="Funciones seno y coseno", type="l")
lines(x, z, col="blue", lty=2)
legend(x=3, y=1, legend=c("sin(x)", "cos(x)"), lty=c(1,2),col=c("black", "blue"))
plot(x, y, main="Funciones seno y coseno", type="l")
lines(x, z, col=2, lty=2)
legend(locator(1),legend=c("sin(x)","cos(x)"),lty=c(1,2),col=c(1,2))
x <- 1:10; y <- sample(1:10)
nombres <- paste("punto", x, ".", y, sep ="")
plot(x, y); identify(x, y, labels = nombres)
library(lattice)
x <- rbinom(100,5,0.3)
par(mfrow=c(2,2))
dotplot(x);
plot(x,type="h")
barplot(table(x),col=rainbow(length(table(x))))
pie(table(x))
dotplot(x); plot(x,type="h")
pie(table(x))
barplot(table(x),col=rainbow(length(table(x))))
dotplot(x); plot(x,type="h")
y <- rnorm(100); y.f <- rbinom(100,5,0.3)
stem(y)
par(mfrow=c(2,2)); m<-mean(par("usr")[1:2])
boxplot(y); boxplot(yy.f); boxplot(split(y,y.f),col="cyan")
boxplot(y); boxplot(yy.f); boxplot(split(y,y.f),col="cyan")
boxplot(y); boxplot(y.f); boxplot(split(y,y.f),col="cyan")
boxplot(y); boxplot(y~y.f); boxplot(split(y,y.f),col="cyan")
boxplot(y); boxplot(y~y.f); boxplot(split(y,y.f),col="cyan")
stripchart(y); text(m, 1.04, "stripchart método overplot")
stripchart(y,method="jitter",add=T,at=1.2); text(m,1.35,"método jitter")
stripchart(round(y,1),method="stack",add=T,at=0.7); text(m,0.85,"método stack")
data(VADeaths)
dotchart(VADeaths, main = "Death Rates in Virginia - 1940")
data(quakes)
coplot(latlong | depth, data = quakes)
coplot(lat~long | depth, data = quakes)
X <- matrix(rnorm(1000), ncol = 2); colnames(X) <- c("a", "b")
X <- matrix(rnorm(1000), ncol = 2); colnames(X) <- c("a", "b")
x
x
X
plot(X)
X <- matrix(rnorm(1000), ncol = 5)
colnames(X) <- c("a", ïd", "edad", "loc", "peso")
colnames(X) <- c("a", "id", "edad", "loc", "peso")
pairs(X)
data(iris)
razas<-unclass(iris$Species)
plot(iris[1:2],pch=21,bg = c("red", "green3", "blue")[razas])
pairs(iris[1:4], main = "Anderson's Iris Data  3 species", pch = 21, bg = c("red", "green3", "blue")[razas])
? pairs
data(swiss)
pairs(swiss, panel = panel.smooth, lwd = 2, cex= 1.5, col="blue")
y<-rnorm(500); hist(y); hist(y,5)
hist(y);
hist(y,5);
y<-rnorm(500)
qqnorm(y); qqline(y)
qqnorm(y);
qqline(y)
qqnorm(y); qqline(y)
y.t<-rt(500,3)
qqplot(y,y.t,xlab="Dist. Normal", ylab="Dist. St(3)"); qqline(y)
library(lattice)
qqmath(y,distribution=function(p){qt(p,df=5)})
qqmath(y,distribution=function(p){qgamma(p,shape=3,rate=5)})
x<-rlogis(500,2,3)
Fn.x<-ecdf(x); summary(Fn.x)
plot(Fn.x,main="Función Distribución Empírica")
plot(Fn.x,add=T,verticals=T,col.v=2,col.h=4)x.seq<-seq(min(x),max(x),length=4)
plot(Fn.x,add=T,verticals=T,col.v=2,col.h=4) x.seq<-seq(min(x),max(x),length=4)
plot(Fn.x,add=T,verticals=T,col.v=2,col.h=4); x.seq<-seq(min(x),max(x),length=4)
points(x.seq,Fn.x(x.seq),pch=21,bg="red3")
abline(v=x.seq,col="red3")
abline(h=Fn.x(x.seq),col="red3")
x<-rgamma(500,4,3)
hist(x,prob=T)
lines(density(x))
bw.x<-density(x)$bw
bw.x
lines(density(x,bw=bw.x/2),col=2)
lines(density(x,bw=bw.x*2),col=4)
x<-seq(-1,1,0.05); y<-seq(-1,1,0.05)
x<-seq(-1,1,0.05); y<-seq(-1,1,0.05)
f <- function(x, y) cos(y)/(1 + x^2)
z <- outer(x, y, f)
image(x,y,z); contour(x,y,z,add=T)
par()
par(c("col","lty")
2
2
3
x<-(0:65)/10y<-sin(x)par(mfrow=c(1,2))
x<-(0:65)/10;y<-sin(x);par(mfrow=c(1,2))
x<-(0:65)/10
x<-(0:65)/10;y<-sin(x);par(mfrow=c(1,2))
y<-sin(x)par(mfrow=c(1,2))
y<-sin(x)
x<-(0:65)/10;y<-sin(x);par(mfrow=c(1,2))
par(mfrow=c(1,2))
plot(x, y, main="Seno", type="l", ylab="sin(x)")
plot(x, z, main="Coseno", type="l", lty=2, col="red",ylab="cos(x)")
plot(x, z, main="Coseno", type="l", lty=2, col="red", ylab="cos(x)")
x<-matrix(1:6, 2,3)
x[1, , drop=FALSE]
X
plot(x)
x
x[1, , drop=TRUE]
x[1, ]
airquality[1:6, ]
good<-complete.cases(airquality)
good
airquality[good, ][1:6, ]
airquality[1:9, ]
x<-vecto()
x<-vector()
x<-3
x
x<-3,4,5,6,6,67,
x<-3,4,5,6,6,67,5
x<-c(3,4,5,6,6,67,5)
x<-3
x<-c(3,4,5,6,6,67,5)
attributes(x)
length(x)
print(x)
msg<-"Hello"
y <- c(1.7, "a")
y <- c(TRUE, 2)
y <- c("a", TRUE)
y
class(msg)
class(x)
class(y)
x <- 0:6
as.numeric(x)
as.logical(x)
x <- c("a", "b", "c")
class(x)
length(x)
as.logical(x)
(x)
as.complex(x)
x
as.logical(x)
as.complex(x)
as.numeric(x)
m <- matrix(nrow = 2, ncol = 3)
View(m)
m
dim(m)
dim (x)
dim(x)
attributes(m)
m <- matrix(1:6, nrow = 2, ncol = 3)
View(m)
m
clear
clear()
clean
clean()
m <- 1:10> m
m <- 1:10
dim(m)<-c(2,5)
View(m)
x <- list(1, "a", TRUE, 1 + 4i)
[[1]]
x
x[3]
x[[3]]
x[[4]]
x[4]
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
x <- factor(c("yes", "yes", "no", "yes", "n"))
x
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
table(x)
unclass(x)
x <- factor(c("yes", "yes", "no", "yes", "n"))
table(x)
table(y)
y
unclass(x)
x <- factor(c("yes", "yes", "no", "yes", "no"),            levels = c("yes", "no"))
x <- factor(c("yes", "yes", "no", "yes", "no"),levels = c("yes", "no"))
x
unclass(x)
table(x)
is.char(x)
is.na(x)
is.nan(x)
is.nan(m)
x <- data.frame(foo = 1:4, bar = c(T, T, F, F))
View(x)
x
x <- 1:3
names(x)
names(x) <- c("foo", "bar", "norf")
x
names(x)
x <- list(a = 1, b = 2, c = 3)
x
x$a
m <- matrix(1:4, nrow = 2, ncol = 2)
View(m)
dimnames(m) <- list(c("a", "b"), c("c", "d"))
m
View(m)
dim(m)
y<-dim(m)
y
x[2]
x[3]
x[6]
x
names(x)<-(uno,dos,tres)
x <- matrix(1:6, 2, 3)
View(x)
x <- list(foo = 1:4, bar = 0.6)
x[1]
x[[1]]
x[[1,1]
]
x[[1,1]]
x[[1][1]]
x[1][1]
x[[2]]
x <- list(foo = 1:4, bar = 0.6, baz = "hello")
x[c(1, 3)]
x[1, 3]
x[1][] 3]
x[1][3]
x[1],[3]
x[[1][3]]
x[[1,3]]
x <- list(foo = 1:4, bar = 0.6, baz = "hello")
x <- list(foo = 1:4, bar = 0.6, baz = "hello")
name <- "foo"
x$baz
x[[c(1,3)]]
x[[c(2,3)]]
x[[c(2,)]]
x[[c(2,1)]]
x[[c(3,1)]]
x[[c(3,2)]]
x[[c(3,0)]]
x[[c(3)]]
x <- list(aardvark = 1:5)
x$a
x <- c(1, 2, NA, 4, NA, 5)
bad <- is.na(x)
bad <- !is.na(x)
x[bad]
x <- c(1, 2, NA, 4, NA, 5)
x <- c(1, 2, NA, 4, NA, 5)
y <- c("a", "b", NA, "d", NA, "f")
good <- complete.cases(x, y)
y <- c(NA, "b", NA, "d", NA, "f")
good <- complete.cases(x, y)
x[good]
y[good]
airquality[1:6, ]
airquality[1: , ]
airquality[1:*, ]
airquality[1:30, ]
y<-complete.cases(airquality)
y
airquality[y] [1:30, ]
airquality[y,] [1:30, ]
ejem<-function(n){x*n}
ejem(1)
x<-5
ejem(1)
ejem(1)3
ejem(4)
make.power <- function(n) {    pow <- function(x) {        x^n    }    pow}
make.power <- function(n) {    pow <- function(x) {        x^n    }    pow}
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
cube <- make.power(3)
square <- make.power(2)
cube(3)
cube()
cube(1)
cube <- make.power(3)
cube()
ls(environment(cube))
n
pow
get("n", environment(cube))
get("n", environment(square))
get("x", environment(square))
get("x", environment(cube))
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
cube <- make.power(3)
square <- make.power(2)
cube(3)
square(3)
ls(environment(cube))
get("n", environment(cube))
get("x", environment(cube))
get("n", environment(square))
get("x", environment(square))
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
x <- matrix(1:4, 2, 2); y <- matrix(rep(10, 4), 2, 2)
x * y
x / y
x %*% y
date()
tme()
time()
systime()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
directory<-"/specdata"
omplete <- function(directory, id = 1:332) {
for (i in id){
name<-formatC(i, width = 3, format = "d", flag = "0")
file<-paste(directory, "/",name,".csv", sep="")
data <- read.csv(file)
good <- complete.cases(data)
data<-data[good, ]
obvs<-length(data)
result <- data.frame(id=i, nobs=obvs)
}
}
omplete(directory,1)
data <- read.csv(file)
file<-paste(directory, "/","001",".csv", sep="")
data <- read.csv(file)
directory<-"./specdata"
data <- read.csv(file)
directory<-"./specdata/"
data <- read.csv(file)
directory<-".coursera/specdata/"
data <- read.csv(file)
data <- read.csv(./coursera/specdata/001.csv)
data <- read.csv("./coursera/specdata/001.csv")
data <- read.csv("./specdata/001.csv")
data <- read.csv("/specdata/001.csv")
data <- read.csv("/specdata/001.csv")directory<-"/specdata"
directory<-"/specdata"
pollutantmean <- function(directory, pollutant, id = 1:332) {
datos<-data.frame()
for (i in id){
name<-formatC(i, width = 3, format = "d", flag = "0")
file<-paste(directory, "/",name,".csv", sep="")
data <- read.csv(file)
good <- complete.cases(data)
data<-data[good, ]
datos<-rbind(datos,data)
}
if (pollutant=="sulfate"){mean(datos$sulfate)}
else{mean(datos$nitrate)}
}
pollutantmean(directory, "nitrate", 1)
pollutantmean <- function(directory, pollutant, id = 1:332) {
datos<-data.frame()
for (i in id){
name<-formatC(i, width = 3, format = "d", flag = "0")
file<-paste(directory, "/",name,".csv", sep="")
data <- read.csv(file)
good <- complete.cases(data)
data<-data[good, ]
datos<-rbind(datos,data)
}
if (pollutant=="sulfate")
{mean(datos$sulfate)}
else
{mean(datos$nitrate)}
}
pollutantmean(directory, "nitrate", 1)
pollutantmean(directory, "sulfate", 1)
library(datasets)
data(iris)
data(iris)
?iris
Sepal.Length
library(datasets)
data(iris)
?iris
class (iris)
View(iris)
summary (iris)
mean(iris$Sepal.Length)
mean(iris$Sepal.Length,iris$Species="virginica" )
mean(iris$Sepal.Length,iris$Species=virginica)
mean(iris$Sepal.Length,iris$Species==virginica)
mean(iris$Sepal.Length,iris$Species=="virginica" )
set.seed(13435)
X <- data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
View(X)
X <- X[sample(1:5),]
View(X)
X$var2[c(1,3)] = NA
View(X)
X(1)
X[1]
X[0]
X[4]
X[3]
X$row.names
X[1:2,"var2"]
View(X)
X[(X$var1 <= 3 & X$var3 > 11),]
X[which(X$var2 > 8),]
X$hola<-3
View(X)
X$hola<-norm(1,2)
X$hola<-rnorm(1,2)
View(X)
data(UCBAdmissions)
DF = as.data.frame(UCBAdmissions)
df
View(DF)
Freq ~ Gender
DF$Freq ~ DF$Gender
DF.Freq ~ DF.Gender
DF$Freq ~ DF$Gender
xt <- xtabs(Freq ~ Gender + Admit,data=DF)
xt
warpbreaks$replicate <- rep(1:9, len = 54)
xt = xtabs(breaks ~.,data=warpbreaks)
xt
xt = xtabs(breaks ~ Gender,data=warpbreaks)
xt = xtabs(breaks ~ Gender ,data=warpbreaks)
xt = xtabs(breaks = ~ Gender ,data=warpbreaks)
xt = xtabs(breaks =~. Gender ,data=warpbreaks)
xt = xtabs(breaks = ~. Gender ,data=warpbreaks)
ftable(xt)
View(warpbreaks)
View(DF)
DF$mio = DF$Admit %in% c("Admitted")
View(DF)
DF[mio=true]
DF[mio="true"]
DF[mio=="true"]
DF[mio=="true",]
DF[DF$mio=="true",]
DF[DF$mio="true",]
DF[DF$mio,]
table(DF$mio)
ejem=cut(DF$Admit)
yesno <- sample(c("yes","no"),size=10,replace=TRUE)
yesno
yesnofac = factor(yesno,levels=c("yes","no"))
yesnofac
relevel(yesnofac,ref="yes")
library(Hmisc)
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars,id=c("carname","gear","cyl"),measure.vars=c("mpg","hp"))
library(reshape2)
carMelt <- melt(mtcars,id=c("carname","gear","cyl"),measure.vars=c("mpg","hp"))
View(mtcars)
View(carMelt)
head(InsectSprays)
tapply(InsectSprays$count,InsectSprays$spray,sum)
sprCount = lapply(spIns,sum)
sprCount
tapply(InsectSprays$count,InsectSprays$spray,sum)ddply(InsectSprays,.(spray),summarize,sum=sum(count))
ddply(InsectSprays,.(spray),summarize,sum=sum(count))
setwd("~/coursera/ProgrammingAssignment2")
